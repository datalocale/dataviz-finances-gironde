import { Map as ImmutableMap } from 'immutable';

import React from 'react';
import { connect } from 'react-redux';
import { format } from 'currency-formatter';

import budgetBalance from '../../../../shared/js/finance/budgetBalance';
import m52ToAggregated from '../../../../shared/js/finance/m52ToAggregated';
import hierarchicalAggregated from '../../../../shared/js/finance/hierarchicalAggregated';
import {flattenTree} from '../../../../shared/js/finance/visitHierarchical.js';
import navigationTree from '../../navigationTree';
import { EXPENDITURES, REVENUE } from '../../constants/pages';

/*
    In this component, there are several usages of dangerouslySetInnerHTML.

    In the context of the public dataviz project, the strings being used are HTML generated by 
    a markdown parser+renderer. This part is considered trusted enough.

    The content being passed to the markdown parser is created and reviewed by the project team and likely
    by the communication team at the Département de la Gironde. So this content is very very unlikely to ever
    contain anything that could cause any harm.

    For these reasons, the usages of dangerouslySetInnerHTML are fine.
*/

/*

interface FinanceElementProps{
    contentId: string,
    total: number, // total amount of money for this element
    texts: FinanceElementTextsRecord,

    // the partition will be displayed in the order it's passed. Sort beforehand if necessary
    partition: Array<{
        contentId: string,
        amount: number,
        texts: FinanceElementTextsRecord,
        url: string
    }>
}

*/

export function FinanceElement({contentId, total, texts, partition, year, urls}) {
    const atemporalText = texts && texts.get('atemporal');
    const yearText = texts && texts.get('byYear') && texts.get('byYear').get(year);

    const label = texts && texts.get('label');

    return React.createElement('article', {className: 'finance-element'}, 
        React.createElement('h1', {className: label ? '' : 'missing', 'data-id': contentId}, label), 
        React.createElement('h2', {}, format(total, { code: 'EUR' })),
        
        atemporalText ? React.createElement('section', {dangerouslySetInnerHTML: {__html: atemporalText}}) : undefined,
        yearText ? React.createElement('h3', {}, "Considérations spécifiques à l'année ",year) : undefined,
        yearText ? React.createElement('section', {dangerouslySetInnerHTML: {__html: yearText}}) : undefined,

        partition ? React.createElement('section', { className: 'partition'}, 
            partition.map(({contentId, amount, texts, url}) => {
                return React.createElement('a',
                    {
                        href: url
                    }, 
                    React.createElement('h1', {}, texts && texts.get('label') || contentId),
                    React.createElement('h2', {},
                        format(amount, { code: 'EUR' }),
                        ' ',
                        (100*amount/total).toFixed(1)+'%'
                    ),
                    React.createElement('p', texts && texts.get('atemporal'))
                );
            })  
        ) : undefined 

    );
}



function makePartition(contentId, totalById, textsById){
    const childrenIds = navigationTree[contentId];

    return childrenIds ? childrenIds.map(childId => ({
        contentId: childId,
        amount: totalById.get(childId),
        texts: textsById.get(childId),
        url: '#!/finance-details/'+childId
    })) : undefined;
}



function getTotalById(m52Instruction){
    const aggregated = m52ToAggregated(m52Instruction);

    let totalById = new ImmutableMap();

    aggregated.forEach(aggRow => {
        totalById = totalById.set(aggRow.id, aggRow.total);
    });

    ['D', 'R'].forEach(rd => {
        ['F', 'I'].forEach(fi => {
            const hierAgg = hierarchicalAggregated(aggregated, {rd, fi});
            flattenTree(hierAgg).forEach(aggHierNode => {
                totalById = totalById.set(aggHierNode.id, aggHierNode.total);
            });
        });
    });

    return totalById;
}


export default connect(
    state => {        
        const { m52InstructionByYear, textsById, breadcrumb, currentYear } = state;
        
        const m52Instruction = m52InstructionByYear.get(currentYear);
        const displayedContentId = breadcrumb.last();
        
        const balance = m52Instruction ? budgetBalance(m52Instruction) : {};
        const totalById = (m52Instruction && getTotalById(m52Instruction)) || new ImmutableMap();

        const total = m52Instruction && (displayedContentId === EXPENDITURES ?
            balance.expenditures : (displayedContentId === REVENUE ?
                balance.revenue :
                totalById.get(displayedContentId)));

        return Object.assign(
            {
                contentId: displayedContentId, 
                total, 
                texts: textsById.get(displayedContentId),
                partition: makePartition(displayedContentId, totalById, textsById),
                year: currentYear
            }
        )

    },
    () => ({})
)(FinanceElement);